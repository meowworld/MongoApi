在SpringBoot，我们很多时候需要加载properties文件作为一些配置文件，并加入到容器中。
在需要的时候自动注入就可以使用

下面是我自己的demo

1.在resource文件夹下建一个my.properties
#meow properties
name=hahah
age=18

2.#配置类：加载工具类用的是spring自带的

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.UrlResource;
import org.springframework.core.io.support.PropertiesLoaderUtils;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

@Configuration
public class AppConfig {

    @Bean
    public MessageConfig loadProperties(){
        Properties properties =null;
        try {
            properties = PropertiesLoaderUtils.loadProperties(new UrlResource("classpath:my.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Map<String,String> map = new HashMap<>();
        properties.entrySet().forEach(entryset ->{
            String key = (String)entryset.getKey();
            String value = (String) entryset.getValue();
            map.put(key, value);
        });

        MessageConfig messageConfig = new MessageConfig();
        messageConfig.setMessageMap(map);
        return messageConfig;
    }

3.信息实体
public class MessageConfig {

    private Map<String,String> messageMap;

    public Map<String, String> getMessageMap() {
        return messageMap;
    }

    public void setMessageMap(Map<String, String> messageMap) {
        this.messageMap = messageMap;
    }
}

4.使用自动注入
@RestController
@RequestMapping("/test")
public class TestController {

    @Autowired
    private MessageConfig messageConfig;

    @GetMapping("/hello")
    public String hello(Person person){
        System.out.println("ok，校验通过");

        Map<String, String> messageMap = messageConfig.getMessageMap();

        System.out.println(messageMap.toString());

        return "OK";
    }
    
  5.控制台
  {name=hahah, age=18}
  
--------嘻嘻--------

#todo：扩展一个key对应多个value，可能会有这种情况

1.在resource文件夹下建一个my.properties，多个值之间用逗号分隔
#meow properties
name=\meow,\Mr.wang
age=\18,\28

package com.example.anno.config;

2.配置类
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.UrlResource;
import org.springframework.core.io.support.PropertiesLoaderUtils;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.util.StringUtils;

import java.io.IOException;
import java.util.Map;
import java.util.Properties;

@Configuration
public class AppConfig {

    @Bean
    public MessageConfig loadProperties(){
        Properties properties =null;
        try {
            <!--这样读取中文会出现乱码 Properties 默认是按ISO-8859-1读取properties = PropertiesLoaderUtils.loadProperties(new UrlResource("classpath:my.properties")); -->
            
            EncodingResorce resource = new EncodingResoure(new UrlResource("classpath:my.properties"),"UTF-8")
            properties = PropertiesLoaderUtils.loadProperties(resource);//这样就OK啦
        } catch (IOException e) {
            e.printStackTrace();
        }
        MultiValueMap<String,String> map = new LinkedMultiValueMap<>();
        for (Map.Entry<?, ?> entry : properties.entrySet()) {
            String key = ((String) entry.getKey()).trim();
            for (String value : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {
                map.add(key, value.trim());
            }
        }

        MessageConfig messageConfig = new MessageConfig();
        messageConfig.setMultiValueMap(map);
        return messageConfig;
    }
}

3.信息实体
public class MessageConfig {

   private MultiValueMap<String,String> multiValueMap;

    public MultiValueMap<String, String> getMultiValueMap() {
        return multiValueMap;
    }

    public void setMultiValueMap(MultiValueMap<String, String> multiValueMap) {
        this.multiValueMap = multiValueMap;
    }
}

4.打印
@RestController
@RequestMapping("/test")
public class TestController {

    @Autowired
    private MessageConfig messageConfig;

    @GetMapping("/hello")
    public String hello(Person person){
        System.out.println("ok，校验通过");
        MultiValueMap<String, String> multiValueMap = messageConfig.getMultiValueMap();
        System.out.println(multiValueMap.toString());
        return "OK";
    }
}

5.console
{age=[18, 28], name=[meow, Mr.wang]}

#注意：Properties 默认是按ISO-8859-1读取











